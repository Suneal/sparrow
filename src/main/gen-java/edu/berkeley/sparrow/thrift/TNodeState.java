/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.sparrow.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TNodeState implements org.apache.thrift.TBase<TNodeState, TNodeState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNodeState");

  private static final org.apache.thrift.protocol.TField SPARROW_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("sparrowUsage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EXTERNAL_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("externalUsage", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TNodeStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TNodeStateTupleSchemeFactory());
  }

  public TResourceVector sparrowUsage; // required
  public TResourceVector externalUsage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPARROW_USAGE((short)1, "sparrowUsage"),
    EXTERNAL_USAGE((short)2, "externalUsage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPARROW_USAGE
          return SPARROW_USAGE;
        case 2: // EXTERNAL_USAGE
          return EXTERNAL_USAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPARROW_USAGE, new org.apache.thrift.meta_data.FieldMetaData("sparrowUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResourceVector.class)));
    tmpMap.put(_Fields.EXTERNAL_USAGE, new org.apache.thrift.meta_data.FieldMetaData("externalUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResourceVector.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNodeState.class, metaDataMap);
  }

  public TNodeState() {
  }

  public TNodeState(
    TResourceVector sparrowUsage,
    TResourceVector externalUsage)
  {
    this();
    this.sparrowUsage = sparrowUsage;
    this.externalUsage = externalUsage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNodeState(TNodeState other) {
    if (other.isSetSparrowUsage()) {
      this.sparrowUsage = new TResourceVector(other.sparrowUsage);
    }
    if (other.isSetExternalUsage()) {
      this.externalUsage = new TResourceVector(other.externalUsage);
    }
  }

  public TNodeState deepCopy() {
    return new TNodeState(this);
  }

  public void clear() {
    this.sparrowUsage = null;
    this.externalUsage = null;
  }

  public TResourceVector getSparrowUsage() {
    return this.sparrowUsage;
  }

  public TNodeState setSparrowUsage(TResourceVector sparrowUsage) {
    this.sparrowUsage = sparrowUsage;
    return this;
  }

  public void unsetSparrowUsage() {
    this.sparrowUsage = null;
  }

  /** Returns true if field sparrowUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetSparrowUsage() {
    return this.sparrowUsage != null;
  }

  public void setSparrowUsageIsSet(boolean value) {
    if (!value) {
      this.sparrowUsage = null;
    }
  }

  public TResourceVector getExternalUsage() {
    return this.externalUsage;
  }

  public TNodeState setExternalUsage(TResourceVector externalUsage) {
    this.externalUsage = externalUsage;
    return this;
  }

  public void unsetExternalUsage() {
    this.externalUsage = null;
  }

  /** Returns true if field externalUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalUsage() {
    return this.externalUsage != null;
  }

  public void setExternalUsageIsSet(boolean value) {
    if (!value) {
      this.externalUsage = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPARROW_USAGE:
      if (value == null) {
        unsetSparrowUsage();
      } else {
        setSparrowUsage((TResourceVector)value);
      }
      break;

    case EXTERNAL_USAGE:
      if (value == null) {
        unsetExternalUsage();
      } else {
        setExternalUsage((TResourceVector)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPARROW_USAGE:
      return getSparrowUsage();

    case EXTERNAL_USAGE:
      return getExternalUsage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPARROW_USAGE:
      return isSetSparrowUsage();
    case EXTERNAL_USAGE:
      return isSetExternalUsage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TNodeState)
      return this.equals((TNodeState)that);
    return false;
  }

  public boolean equals(TNodeState that) {
    if (that == null)
      return false;

    boolean this_present_sparrowUsage = true && this.isSetSparrowUsage();
    boolean that_present_sparrowUsage = true && that.isSetSparrowUsage();
    if (this_present_sparrowUsage || that_present_sparrowUsage) {
      if (!(this_present_sparrowUsage && that_present_sparrowUsage))
        return false;
      if (!this.sparrowUsage.equals(that.sparrowUsage))
        return false;
    }

    boolean this_present_externalUsage = true && this.isSetExternalUsage();
    boolean that_present_externalUsage = true && that.isSetExternalUsage();
    if (this_present_externalUsage || that_present_externalUsage) {
      if (!(this_present_externalUsage && that_present_externalUsage))
        return false;
      if (!this.externalUsage.equals(that.externalUsage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TNodeState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TNodeState typedOther = (TNodeState)other;

    lastComparison = Boolean.valueOf(isSetSparrowUsage()).compareTo(typedOther.isSetSparrowUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSparrowUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sparrowUsage, typedOther.sparrowUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternalUsage()).compareTo(typedOther.isSetExternalUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalUsage, typedOther.externalUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TNodeState(");
    boolean first = true;

    sb.append("sparrowUsage:");
    if (this.sparrowUsage == null) {
      sb.append("null");
    } else {
      sb.append(this.sparrowUsage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("externalUsage:");
    if (this.externalUsage == null) {
      sb.append("null");
    } else {
      sb.append(this.externalUsage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sparrowUsage != null) {
      sparrowUsage.validate();
    }
    if (externalUsage != null) {
      externalUsage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class TNodeStateStandardSchemeFactory implements SchemeFactory {
    public TNodeStateStandardScheme getScheme() {
      return new TNodeStateStandardScheme();
    }
  }

  private static class TNodeStateStandardScheme extends StandardScheme<TNodeState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TNodeState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPARROW_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sparrowUsage = new TResourceVector();
              struct.sparrowUsage.read(iprot);
              struct.setSparrowUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXTERNAL_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.externalUsage = new TResourceVector();
              struct.externalUsage.read(iprot);
              struct.setExternalUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TNodeState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sparrowUsage != null) {
        oprot.writeFieldBegin(SPARROW_USAGE_FIELD_DESC);
        struct.sparrowUsage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.externalUsage != null) {
        oprot.writeFieldBegin(EXTERNAL_USAGE_FIELD_DESC);
        struct.externalUsage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNodeStateTupleSchemeFactory implements SchemeFactory {
    public TNodeStateTupleScheme getScheme() {
      return new TNodeStateTupleScheme();
    }
  }

  private static class TNodeStateTupleScheme extends TupleScheme<TNodeState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNodeState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSparrowUsage()) {
        optionals.set(0);
      }
      if (struct.isSetExternalUsage()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSparrowUsage()) {
        struct.sparrowUsage.write(oprot);
      }
      if (struct.isSetExternalUsage()) {
        struct.externalUsage.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNodeState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.sparrowUsage = new TResourceVector();
        struct.sparrowUsage.read(iprot);
        struct.setSparrowUsageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.externalUsage = new TResourceVector();
        struct.externalUsage.read(iprot);
        struct.setExternalUsageIsSet(true);
      }
    }
  }

}

